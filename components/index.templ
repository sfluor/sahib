package components

import "sahib/model"

templ Index() {
<!DOCTYPE html>
<html lang="en">
@Header()

<body>
    <main class="container">
      <h1>صاحب اللغة</h1>

      <form
        class="grid"
        hx-target="#result"
        hx-disabled-elt="find input[type='text'], find button"
        hx-post="/search"
        hx-target-error="#result"
        hx-swap="innerHTML"
        hx-include="#apiKey"
        hx-indicator="#indicator"
      >
          <input type="text" name="search" id="search" placeholder="Search for a word: فعل"/>
          <button type="submit">Search !</button>
      </form>

        <span aria-busy="true" id="indicator" class="htmx-indicator">Looking up for the word...</span>

        <div class="grid">
            <div id="result"> Start searching ! </div>
        </div>

        <footer>
            <div class="grid">
                <input type="text" id="registerKey" placeholder="Your Perplexity API Key"/>
                <button id="registerKeyButton">Register your API Key</button>
            </div>
        </footer>
        <input id="apiKey" name="apiKey" style="display: none" />
    </main>
</body>
<script>
    // Scoping function to avoid redeclaration of const problems with htmx executing the script multiple times.
    (() => {
        const PERPLEXITY_API_KEY = "perplexityApiKey";
        function loadAPIKey() {
            return localStorage.getItem(PERPLEXITY_API_KEY);
        }

        function registerAPIKey(key) {
            localStorage.setItem(PERPLEXITY_API_KEY, key);
        }

        // Hack to easily add it into the htmx payload
        const apiKeyInp = document.getElementById("apiKey");
        apiKeyInp.value = loadAPIKey();

        document.getElementById("registerKeyButton")
            .addEventListener("click", () => {
                const input = document.getElementById("registerKey");
                registerAPIKey(input.value);
                apiKeyInp.value = input.value;
                input.value = "API Key registered !";
            });
    })();
</script>
</html>
}

templ Result(all []model.TranslationsAndSource) {
    <div>
        for _, ts := range all {
        <article>
        <header> From <b>{ts.Source}</b></header>
            <table>
                <thead>
                    <tr>
                        <th scope="col">Type</th>
                        <th scope="col">Arabic</th>
                        <th scope="col">Translation</th>
                    </tr>
                </thead>
                <tbody>
                    for _, row := range ts.Translations.List {
                        <tr>
                            <th>{ row.Meta }</th>
                            <th>{ row.Arabic }</th>
                            <th>{ row.Translation }</th>
                        </tr>
                    }
                </tbody>
            </table>
        </article>
        <br />
        }
    </div>
}
